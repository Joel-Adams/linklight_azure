- name: set node types (NETWORKING MODE)
  set_fact:
    rtr1_node: "{{ azure_lab_node_types_networking['rtr1'] }}"
    rtr2_node: "{{ azure_lab_node_types_networking['rtr2'] }}"
    host1_node: "{{ azure_lab_node_types_networking['host1'] }}"

- name: set node types (NETWORKING MODE all_cisco)
  set_fact:
    rtr3_node: "{{ all_cisco['rtr3'] }}"
    rtr4_node: "{{ all_cisco['rtr4'] }}"
  when:
    - special is defined
    - special is match("all_cisco")

- name: set node types (NETWORKING MODE SPECIAL)
  set_fact:
    rtr3_node: "{{ multivendor['rtr3'] }}"
    rtr4_node: "{{ multivendor['rtr4'] }}"
  when:
    - special is defined
    - special is match("multivendor")

##############Router 1##############

# - name: find ami for rtr1 (NETWORKING MODE)
#   ec2_ami_facts:
#     region: "{{ ec2_region }}"
#     owners: "{{ ec2_instance_types[rtr1_node].owners }}"
#     filters:
#       name: "{{ ec2_instance_types[rtr1_node].filter }}"
#       architecture: "{{ ec2_instance_types[rtr1_node].architecture }}"
#   register: amis
#
# - name: save ami for rtr1 (NETWORKING MODE)
#   set_fact:
#     rtr1_ami: >
#       {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create Azure instances for rtr1 node (NETWORKING MODE)
  azure_rm_virtualmachine:
    resource_group: "{{azure_name_prefix}}"
    name: "{{azure_name_prefix}}.{{ item }}"
    public_ip_allocation_method: Static
    instance_type: "{{ azure_instance_types[rtr1_node].vm_size }}"
    image:
      offer: "{{ azure_instance_types[csr-byol].offer }}"
      publisher: "{{ azure_instance_types[csr-byol].publisher }}"
      sku: "{{ azure_instance_types[csr-byol].sku }}"
      version: "{{ azure_instance_types[csr-byol].version }}"
    ssh_public_keys:
      - path: /home/azure-user/.ssh/authorized_keys
        key_data: "{{lookup('file', '{{ azure_name_prefix }}-key') }}"
    append_tags: yes
    tags:
      Workshop_rtr1: "{{azure_name_prefix}}-rtr1"
  with_sequence: start=0 end="{{ student_total }}"
  register: rtr1_output

- name: Ensure tags are present for rtr1 node (NETWORKING MODE)
  azure_rm_virtualmachine:
    resource_group: "{{azure_name_prefix}}"
    name: "{{item.1}}"
    state: present
    append_tags: yes
    tags:
      Name: "{{ azure_name_prefix }}-student{{item.0 + 1}}-rtr1"
      Workshop_rtr1: "{{azure_name_prefix}}-rtr1"
      Workshop: "{{azure_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      # AWS_USERNAME: "{{ linklight_user }}"
      # Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "Student Count {{student_total}}"
      short_name: "rtr1"
      ansible_network_os: "{{ec2_instance_types[rtr1_node].os}}"
  with_indexed_items:
    - "{{ rtr1_output.instance_ids }}"
  when: rtr1_output.instance_ids is not none


##############Router 2##############

# - name: find ami for rtr2 (NETWORKING MODE)
#   ec2_ami_facts:
#     region: "{{ ec2_region }}"
#     owners: "{{ ec2_instance_types[rtr2_node].owners }}"
#     filters:
#       name: "{{ ec2_instance_types[rtr2_node].filter }}"
#       architecture: "{{ ec2_instance_types[rtr2_node].architecture }}"
#   register: amis
#   when: networking
#
# - name: save ami for rtr2 (NETWORKING MODE)
#   set_fact:
#     rtr2_ami: >
#       {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create Azure instances for rtr2 node (NETWORKING MODE)
  azure_rm_virtualmachine:
    resource_group: "{{azure_name_prefix}}"
    name: "{{azure_name_prefix}}.{{ item }}"
    public_ip_allocation_method: Static
    instance_type: "{{ azure_instance_types[rtr2_node].vm_size }}"
    image:
      offer: "{{ azure_instance_types[csr-byol].offer }}"
      publisher: "{{ azure_instance_types[csr-byol].publisher }}"
      sku: "{{ azure_instance_types[csr-byol].sku }}"
      version: "{{ azure_instance_types[csr-byol].version }}"
    ssh_public_keys:
      - path: /home/azure-user/.ssh/authorized_keys
        key_data: "{{lookup('file', '{{ azure_name_prefix }}-key') }}"
    append_tags: yes
    tags:
      Workshop_rtr2: "{{azure_name_prefix}}-rtr2"
  with_sequence: start=0 end="{{ student_total }}"
  register: rtr2_output

- name: Ensure tags are present for rtr2 node (NETWORKING MODE)
  azure_rm_virtualmachine:
    resource_group: "{{azure_name_prefix}}"
    name: "{{item.1}}"
    state: present
    append_tags: yes
    tags:
      Name: "{{ azure_name_prefix }}-student{{item.0 + 1}}-rtr2"
      Workshop_rtr2: "{{azure_name_prefix}}-rtr2"
      Workshop: "{{azure_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      # AWS_USERNAME: "{{ linklight_user }}"
      # Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "Student Count {{student_total}}"
      short_name: "rtr2"
      ansible_network_os: "{{ec2_instance_types[rtr2_node].os}}"
  with_indexed_items:
    - "{{ rtr2_output.instance_ids }}"
  when: rtr2_output.instance_ids is not none

##############Router 3##############
# - name: turn on rtr3 and rtr4 if special is configured
#   block:
#   - name: find ami for rtr3 (NETWORKING MODE)
#     ec2_ami_facts:
#       region: "{{ ec2_region }}"
#       owners: "{{ ec2_instance_types[rtr3_node].owners }}"
#       filters:
#         name: "{{ ec2_instance_types[rtr3_node].filter }}"
#         architecture: "{{ ec2_instance_types[rtr3_node].architecture }}"
#     register: amis
#
#   - name: save ami for rtr3 (NETWORKING MODE)
#     set_fact:
#       rtr3_ami: >
#         {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create Azure instances for rtr3 node (NETWORKING MODE)
  azure_rm_virtualmachine:
    resource_group: "{{azure_name_prefix}}"
    name: "{{azure_name_prefix}}.{{ item }}"
    public_ip_allocation_method: Static
    instance_type: "{{ azure_instance_types[rtr3_node].vm_size }}"
    image:
      offer: "{{ azure_instance_types[csr-byol].offer }}"
      publisher: "{{ azure_instance_types[csr-byol].publisher }}"
      sku: "{{ azure_instance_types[csr-byol].sku }}"
      version: "{{ azure_instance_types[csr-byol].version }}"
    ssh_public_keys:
      - path: /home/azure-user/.ssh/authorized_keys
        key_data: "{{lookup('file', '{{ azure_name_prefix }}-key') }}"
    append_tags: yes
    tags:
      Workshop_rtr3: "{{azure_name_prefix}}-rtr3"
  with_sequence: start=0 end="{{ student_total }}"
  register: rtr3_output

- name: Ensure tags are present for rtr3 node (NETWORKING MODE)
  azure_rm_virtualmachine:
    resource_group: "{{azure_name_prefix}}"
    name: "{{item.1}}"
    state: present
    append_tags: yes
    tags:
      Name: "{{ azure_name_prefix }}-student{{item.0 + 1}}-rtr3"
      Workshop_rtr3: "{{azure_name_prefix}}-rtr3"
      Workshop: "{{azure_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      # AWS_USERNAME: "{{ linklight_user }}"
      # Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "Student Count {{student_total}}"
      short_name: "rtr3"
      ansible_network_os: "{{ec2_instance_types[rtr3_node].os}}"
  with_indexed_items:
    - "{{ rtr3_output.instance_ids }}"
  when: rtr3_output.instance_ids is not none

  ##############Router 4##############

  # - name: find ami for rtr4 (NETWORKING MODE)
  #   ec2_ami_facts:
  #     region: "{{ ec2_region }}"
  #     owners: "{{ ec2_instance_types[rtr4_node].owners }}"
  #     filters:
  #       name: "{{ ec2_instance_types[rtr4_node].filter }}"
  #       architecture: "{{ ec2_instance_types[rtr4_node].architecture }}"
  #   register: amis
  #   when: networking
  #
  # - name: save ami for rtr4 (NETWORKING MODE)
  #   set_fact:
  #     rtr4_ami: >
  #       {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create Azure instances for rtr4 node (NETWORKING MODE)
  azure_rm_virtualmachine:
    resource_group: "{{azure_name_prefix}}"
    name: "{{azure_name_prefix}}.{{ item }}"
    public_ip_allocation_method: Static
    instance_type: "{{ azure_instance_types[rtr4_node].vm_size }}"
    image:
      offer: "{{ azure_instance_types[csr-byol].offer }}"
      publisher: "{{ azure_instance_types[csr-byol].publisher }}"
      sku: "{{ azure_instance_types[csr-byol].sku }}"
      version: "{{ azure_instance_types[csr-byol].version }}"
    ssh_public_keys:
      - path: /home/azure-user/.ssh/authorized_keys
        key_data: "{{lookup('file', '{{ azure_name_prefix }}-key') }}"
    append_tags: yes
    tags:
      Workshop_rtr4: "{{azure_name_prefix}}-rtr4"
  with_sequence: start=0 end="{{ student_total }}"
  register: rtr4_output

- name: Ensure tags are present for rtr4 node (NETWORKING MODE)
  azure_rm_virtualmachine:
    resource_group: "{{azure_name_prefix}}"
    name: "{{item.1}}"
    state: present
    append_tags: yes
    tags:
      Name: "{{ azure_name_prefix }}-student{{item.0 + 1}}-rtr4"
      Workshop_rtr4: "{{azure_name_prefix}}-rtr4"
      Workshop: "{{azure_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      # AWS_USERNAME: "{{ linklight_user }}"
      # Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "Student Count {{student_total}}"
      short_name: "rtr4"
      ansible_network_os: "{{ec2_instance_types[rtr4_node].os}}"
  with_indexed_items:
    - "{{ rtr4_output.instance_ids }}"
  when: rtr4_output.instance_ids is not none

# - name: find ami for host1 (NETWORKING MODE)
#   ec2_ami_facts:
#     region: "{{ ec2_region }}"
#     owners: "{{ ec2_instance_types[host1_node].owners }}"
#     filters:
#       name: "{{ ec2_instance_types[host1_node].filter }}"
#       architecture: "{{ ec2_instance_types[host1_node].architecture }}"
#   register: amis
#
# - name: save ami for host1 (NETWORKING MODE)
#   set_fact:
#     host1_ami: >
#       {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

- name: Create Azure instances for host1 node in VPC-2 (NETWORKING MODE)
  azure_rm_virtualmachine:
    resource_group: "{{azure_name_prefix}}"
    name: "{{azure_name_prefix}}.{{ item }}"
    public_ip_allocation_method: Static
    image:
      offer: "{{ azure_instance_types[rhel7].offer }}"
      publisher: "{{ azure_instance_types[rhel7].publisher }}"
      sku: "{{ azure_instance_types[rhel7].sku }}"
      version: "{{ azure_instance_types[rhel7].version }}"
    ssh_public_keys:
      - path: /home/azure-user/.ssh/authorized_keys
        key_data: "{{lookup('file', '{{ azure_name_prefix }}-key') }}"
    append_tags: yes
    tags:
      Workshop_host1: "{{azure_name_prefix}}-host1"
  with_sequence: start=0 end="{{ student_total }}"
  register: host1_output

- name: Ensure tags are present for host1 node (NETWORKING MODE)
  azure_rm_virtualmachine:
    resource_group: "{{azure_name_prefix}}"
    name: "{{item.1}}"
    state: present
    append_tags: yes
    tags:
      Name: "{{ azure_name_prefix }}-student{{item.0 + 1}}-host1"
      Workshop_host1: "{{azure_name_prefix}}-host1"
      Workshop: "{{azure_name_prefix}}"
      Index: "{{ item[0] }}"
      Student: "student{{item.0 + 1}}"
      # AWS_USERNAME: "{{ linklight_user }}"
      # Info: "AWS_USERNAME that provisioned this-> {{ linklight_user }}"
      Linklight: "This was provisioned through the linklight provisioner"
      Students: "Student Count {{student_total}}"
      short_name: "host1"
  with_indexed_items:
    - "{{ host1_output.instance_ids }}"
  when: host1_output.instance_ids is not none

- name: grab all network interfaces for VPC 1 (NETWORKING MODE)
  azure_rm_networkinterface_facts:
    resource_group: "{{azure_name_prefix}}"
    name: "{{azure_vpc_id}}"
  register: vpc_facts_1

- name: grab all network interfaces for VPC 2 (NETWORKING MODE)
  azure_rm_networkinterface_facts:
    resource_group: "{{azure_name_prefix}}"
    name: "{{azure_vpc_id2}}"
  register: vcp_facts_2

- name: Disable Source/Dest check on instance {{ec2_vpc_id1}} (NETWORKING MODE)
  azure_rm_networkinterface:
    name: "{{ item['network_interface_id'] }}"
    resource_group: "{{azure_name_prefix}}"
    cert_validation_mode: ignore
  with_items:
    - "{{vpc_facts_1['network_interfaces']}}"
    - "{{vpc_facts_2['network_interfaces']}}"
